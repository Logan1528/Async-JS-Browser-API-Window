Q6.Describe the purpose and usage of the localStorage and sessionStorage APIs in web 
development. Give suitable examples for each.

Certainly! Browser APIs empower JavaScript developers to interact with various 
functionalities of the web browser environment. Here are some common ones:

1. **DOM (Document Object Model) API**: It provides a structured representation of the 
HTML document, allowing developers to manipulate the document's structure, content, and
 style dynamically.

2. **XHR (XMLHttpRequest) API**: This API enables making HTTP requests from the browser,
 facilitating tasks like fetching data from a server or submitting form data asynchronously
 without reloading the page.

3. **Fetch API**: It offers a modern alternative to XHR for making HTTP requests. Fetch 
API provides a more flexible and powerful interface for fetching resources across the network.

4. **LocalStorage and SessionStorage**: These APIs allow storing data locally in the browser.
 LocalStorage persists even after the browser is closed, while SessionStorage is cleared when
 the session ends.

5. **Web Storage API**: It provides access to the browser's storage mechanisms such as 
localStorage and sessionStorage, enabling developers to store key-value pairs locally 
in a more structured manner.

6. **IndexedDB API**: This API provides a more powerful client-side database for storing 
large amounts of structured data, allowing developers to create sophisticated web applications
 that work offline or with large datasets.

7. **Web Workers API**: It enables running scripts in background threads, allowing heavy 
computational tasks to be performed without blocking the main UI thread, thus improving 
performance and responsiveness.

8. **WebSockets API**: This API facilitates real-time communication between a client and 
a server over a persistent connection, enabling features like live chat, online gaming, 
or real-time data updates.

9. **Geolocation API**: It allows obtaining the device's geographical location, enabling 
location-aware web applications to provide personalized experiences based on the user's 
location.

10. **Canvas API**: This API provides a drawing surface on which developers can dynamically 
render graphics, charts, animations, and other visualizations using JavaScript.

11. **Web Audio API**: It allows developers to create and manipulate audio streams directly 
in the browser, enabling features like audio synthesis, effects processing, and interactive 
audiovisual applications.

These are just a few examples of the many Browser APIs available to JavaScript developers, 
each offering specific functionalities to enhance web development and user experience.

